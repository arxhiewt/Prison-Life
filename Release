-- Script developed by Arxhiewt --
-- Built using AbstractUI, all credits to Arxhiewt --
-- Version 1.0.5 --

local s = setmetatable({}, {__index = function(t, k)
    local v = game.GetService(game, k)
    if v then t[k] = v end
    return v
end})

local ui = loadstring(game:HttpGet("https://raw.githubusercontent.com/icuck/collection-dump/main/AbstractUI", true))()
local dAPI = loadstring(game:HttpGet("https://raw.githubusercontent.com/iHavoc101/Genesis-Studios/main/Modules/DrawingAPI.lua", true))()

local tooltip = require(s.ReplicatedStorage.Modules_client.TooltipModule)

local player = s.Players.LocalPlayer
local cam = workspace.CurrentCamera

local rayParams = RaycastParams.new()
rayParams.IgnoreWater = true
rayParams.FilterType = Enum.RaycastFilterType.Blacklist
rayParams.FilterDescendantsInstances = {player.Character}

local settings = {
    SilentAIM = false;
    TriggeredAim = false;
    CheckArms = true;
    Whitelist = "";
    FOVSize = 250;
}

local lastAction = time()

local fovCircle = dAPI.new("Circle", {
    Thickness = 1.0,
    Color = Color3.fromRGB(0, 0, 0),
    NumSides = 25,
    Radius = _G.FOV
})

local aimTarget = dAPI.new("Triangle", {
    Thickness = 2,
    Color = Color3.fromRGB(255, 0, 0)
})

local weaponsList = {
    "Remington 870";
    "AK-47";
    "M9";
    "M4A1";
    "Hammer";
    "Crude Knife";
}

local rawMeta = getrawmetatable(game)
local originalNameCall = rawMeta.__namecall
local originalIndex = rawMeta.__index

local function isValidCharacter(character)
    return character and (character.FindFirstChildWhichIsA(character, "Humanoid") and character.FindFirstChildWhichIsA(character, "Humanoid").Health > 0) or false
end

local function isPathClear(destination, ancestor)
    local obstructedParts = cam.GetPartsObscuringTarget(cam, {destination}, {ancestor, player.Character})

    for i, part in ipairs(obstructedParts) do
        pcall(function()
            if part.Transparency >= 1 then
                table.remove(obstructedParts, i)
            end
        end)
    end

    if #obstructedParts <= 0 then
        return true
    end

    rayParams.FilterDescendantsInstances = {player.Character}

    local origin = cam.CFrame.Position
    local direction = (destination - origin).Unit * 500
    local rayResult = workspace.Raycast(workspace, origin, direction, rayParams) or {
        Instance = nil;
        Position = origin + direction;
        Material = Enum.Material.Air;
    }

    if rayResult.Instance and (rayResult.Instance:IsDescendantOf(ancestor) or rayResult.Instance == ancestor) then
        return true
    end

    return false
end

local function hasWeapon(target)
    for _, weapon in ipairs(weaponsList) do
        local tool = target.Backpack.FindFirstChild(target.Backpack, weapon) or target.Character.FindFirstChild(target.Character, weapon)
        if tool then
            return true
        end
    end
    return false
end

local function findClosestPlayer(maxDistance)
    local closestPlayer = nil
    local closestPosition = nil
    local shortestDistance = maxDistance or math.huge

    local mousePos = s.UserInputService.GetMouseLocation(s.UserInputService)

    for _, player in ipairs(s.Players:GetPlayers()) do
        if player ~= player and (player.Team ~= player.Team and tostring(player.Team) ~= settings.Whitelist) and isValidCharacter(player.Character) then
            if settings.CheckArms and (player.Team == s.Teams.Inmates and not hasWeapon(player)) then
                continue
            end

            local viewportPos, onScreen = cam.WorldToViewportPoint(cam, player.Character.PrimaryPart.Position)
            local distance = (Vector2.new(viewportPos.X, viewportPos.Y) - mousePos).Magnitude

            if not onScreen or not isPathClear(player.Character.PrimaryPart.Position, player.Character) then
                continue
            end

            if distance < shortestDistance then
                closestPlayer = player
                closestPosition = viewportPos
                shortestDistance = distance
            end
        end
    end

    return closestPlayer, closestPosition
end

local function switchWeapon()
    if player.Character.FindFirstChild(player.Character, "Remington 870") then
        local newTool = player.Backpack.FindFirstChild(player.Backpack, "M4A1") or player.Backpack.FindFirstChild(player.Backpack, "AK-47") or player.Backpack.FindFirstChild(player.Backpack, "M9")
        local humanoid = player.Character.FindFirstChildWhichIsA(player.Character, "Humanoid")
        humanoid.EquipTool(humanoid, newTool)
    else
        local tool = player.Backpack.FindFirstChild(player.Backpack, "Remington 870")
        local humanoid = player.Character.FindFirstChildWhichIsA(player.Character, "Humanoid")
        humanoid.EquipTool(humanoid, tool)
    end
end

local function fireWeapon(gun, bulletCount, shotCount)
    local shootEvent = s.ReplicatedStorage.ShootEvent
    local startTime = time()
    local bullets = {}

    for i = 1, bulletCount do
        bullets[i] = {
            Cframe = CFrame.new(),
            Distance = math.huge
        }
    end
    for i = 1, shotCount do
        shootEvent:FireServer(bullets, gun)
        if time() - startTime > 5 then
            break
        end
    end
end

local mainWindow = ui.new("Prison Life", UDim2.new(0, 420, 0, 420))

mainWindow:Divider("Update Log")

mainWindow:Button("Click to copy Change Logs", "22/10/24", function()
    setclipboard("Silent Aim Circle Fixed, Reduced Lag, Premium options have their own script, Fixed bugs with Player Safety")
end)

mainWindow:Divider("Functions")

mainWindow:Toggle("Silent Aim", "Enable Silent Aim", false, function(state)
    settings.SilentAIM = state
end)

mainWindow:Slider("Silent Aim FOV", "Size of Silent Aim Hitbox", 50, 500, 250, function(value)
    settings.FOVSize = value
end)

mainWindow:Toggle("Player Safety", "Draw a red arrow to players with weapons", false, function(state)
    settings.CheckArms = state
end)

mainWindow:Divider("Developer")

mainWindow:Button("arx (arxhiewt)", "22/10/24", function()
    setclipboard("arx makes the best scripts")
end)

setreadonly(rawMeta, false)

rawMeta.__index = newcclosure(function(self, index)
    if settings.SilentAIM == true and not checkcaller() then
        if typeof(self) == "Instance" and (self:IsA("PlayerMouse") or self:IsA("Mouse")) then
            if index == "Hit" then
                local target = findClosestPlayer(settings.FOVSize)
                if target then
                    local velocity = target.Character.PrimaryPart.AssemblyLinearVelocity
                    local prediction = velocity.Unit
                    if velocity.Magnitude == 0 then
                        prediction = Vector3.new(0, 0, 0)
                    end
                    return CFrame.new(target.Character.Head.Position + prediction)
                end
            end
        end
    end
    return originalIndex(self, index)
end)

setreadonly(rawMeta, true)

s.RunService.RenderStepped:Connect(function()
    if settings.SilentAIM == true then
        fovCircle.Visible = true
        fovCircle.Radius = settings.FOVSize
        fovCircle.Position = s.UserInputService:GetMouseLocation()

        local target, position = findClosestPlayer(settings.FOVSize)
        if target then
            aimTarget.PointA = Vector2.new(position.X - 25, position.Y + 25)
            aimTarget.PointB = Vector2.new(position.X + 25, position.Y + 25)
            aimTarget.PointC = Vector2.new(position.X, position.Y - 25)
            if settings.TriggeredAim and not s.UserInputService:IsKeyDown(Enum.KeyCode.G) then
                mouse1click()
            end
        end
        aimTarget.Visible = target ~= nil
    else
        fovCircle.Visible = false
        aimTarget.Visible = false
    end
end)
